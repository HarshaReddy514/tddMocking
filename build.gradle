apply plugin : 'java'
apply plugin : 'jacoco'


repositories {
  jcenter()
}

jacoco {
 toolVersion = "0.8.1"
 reportsDir = file("$buildDir/ReminderJacocoReportDir")

}

jacocoTestReport {
	reports {
	 xml.enabled false
	 csv.enabled false
	 html.destination file("${buildDir}/reportHtml")
	}
	afterEvaluate {
     classDirectories = files(classDirectories.files.collect{
     fileTree(dir: it, exclude : ['reminderPojo/**'])
    })
   }

}
jacocoTestCoverageVerification {
 violationRules {

 afterEvaluate {
    classDirectories = files(classDirectories.files.collect{
     fileTree(dir: it, exclude : ['reminderPojo/**'])
    })
    }
  rule {
            limit {
                minimum = 0.0
            }
        }
 	}
}

test {
jacoco {
excludes = ['*demo/**']
}
}

dependencies {

  testCompile group: 'junit', name: 'junit', version: '4.12'
  testCompile group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0-beta.5'
  testCompile group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0-beta.5'
 }

test {
	testLogging.showStandardStreams = true
 }


  project.ext.jacocoOfflineSourceSets = [ 'main' ]
  task doJacocoOfflineInstrumentation(dependsOn: [ classes, project.configurations.jacocoAnt ]) {
      inputs.files classes.outputs.files
      File outputDir = new File(project.buildDir, 'instrumentedClasses')
      outputs.dir outputDir
      doFirst {
          project.delete(outputDir)
          ant.taskdef(
              resource: 'org/jacoco/ant/antlib.xml',
              classpath: project.configurations.jacocoAnt.asPath,
              uri: 'jacoco'
          )
          def instrumented = false
          jacocoOfflineSourceSets.each { sourceSetName ->
              if (file(sourceSets[sourceSetName].output.classesDir).exists()) {
                  def instrumentedClassedDir = "${outputDir}/${sourceSetName}"
                  ant.'jacoco:instrument'(destdir: instrumentedClassedDir) {
                      fileset(dir: sourceSets[sourceSetName].output.classesDir, includes: '**/*.class')
                  }
                  //Replace the classes dir in the test classpath with the instrumented one
                  sourceSets.test.runtimeClasspath -= files(sourceSets[sourceSetName].output.classesDir)
                  sourceSets.test.runtimeClasspath += files(instrumentedClassedDir)
                  instrumented = true
              }
          }
          if (instrumented) {
              //Disable class verification based on https://github.com/jayway/powermock/issues/375
              test.jvmArgs += '-noverify'
          }
      }
  }

test.dependsOn doJacocoOfflineInstrumentation
test.finalizedBy jacocoTestReport
